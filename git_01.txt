在现有目录中初始化仓库：git init

克隆仓库： git clone https://github.com/libgit2/libgit2

工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指那些被纳入了版
本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放
入暂存区

检查当前文件状态 git status
  Changes to be committed 这行下面的，就说明是已暂存状态
  Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区
  git status -s(git status --short) 输出简单信息的文件状态
  
跟踪新文件 git add 
  git add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件
  git add --all 跟踪所有文件
  git add 命令。这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。将这个
  命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适

忽略文件 .gitignore  遵守glob模式规范

查看已暂存和未暂存的修改 git diff  git diff --staged

提交更新 git commit -m '你的提交注释' 
跳过使用暂存区域 git commit -a -m '你的提交注释'

移除文件： git rm  如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for
commit” 部分（也就是 未暂存清单）看到 ,然后再运行 git rm 记录此次移除文件的操作：

强制移除： git rm -f
  如果删除之前修改过并且已经放到暂存区域的话，则必须要用强
制删除选项 -f（译注：即 force 的首字母）。这是一种安全特性，用于防止误删还没有添加到快照的数据，这
样的数据不能被 Git 恢复。

移除git仓库中的文件，单保留工作目录中的文件 git rm --cached 

git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式
git rm log/\*.log

移动文件 git mv file_from file_to (如果强行修改文件名，会认为是删除旧文件添加新文件)

查看提交历史：git log 
  git log -p 显示修改细节
  git log -2 显示最近两次提交

撤销操作 
  重新提交 git commit --amend -m 'something'
  取消暂存的文件 git reset HEAD <file>

撤消对文件的修改
  git checkout -- [file]
  你需要知道 git checkout -- [file] 是一个危险的命令，这很重要。你对那个文
件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。除非你确实清楚不想
要那个文件了，否则不要使用这个命令
  任何你未提交的东西丢失后很可能再也找不到
  了

远程仓库的使用

查看远程仓库 git remote  / git remote -v
  更多信息 git remote show origin

添加远程仓库 git remote add <shortname> <url>

从远程仓库中抓取与拉取 git fetch [remote-name]
  如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写

推送到远程仓库 git push [remote-name] [branch-name]
  当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。你必须先将他们的工作拉取下
  来并将其合并进你的工作后才能推送

vim 操作： i -- 编辑； （shift + ;） -- 进入命令模式  w -- 写入  q -- 退出;

远程仓库的移除与重命名
  git remote rename [oldname] [newname]
  git remote rm [name]

打标签
  列出标签 git tag [版本号]

创建标签
  Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）
  附注标签 git tag -a v1.4 -m 'version 1.4'
  轻量标签 git tag v1.4-lw

后期打标签 git tag -a v1.2 <校验和>

共享标签 git push origin [tagname]
  传送所有标签 git push origin --tags

检出标签
  从仓库检出 git checkout -b [branchname] [tagname]
  从本地检出 git checkout [tagname]

Git 别名
  git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
  git config --global alias.last 'log -1 HEAD'  查看最后一次提交
  git config --global alias.unstage 'reset HEAD --' 取消暂存

Git 分支

新建分支 git branch <name>
  新建分支并切换到新分支 git checkout -b <name>

切换分支 git checkout <name>
  分支切换会改变你工作目录中的文件
在切换分支时，一定要注意你工作目录里的文件会被改变。如果是切换到一个较旧的分支，
你的工作目录会恢复到该分支最后一次提交时的样子。如果 Git 不能干净利落地完成这个任
务，它将禁止切换分支。

项目分叉历史
  你可以简单地使用 git log 命令查看分叉历史。运行 git log --oneline --decorate --graph --all
，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。

合并分支 git merge
  当你试图合并两个分
支时，如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进
（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”

删除分支 git -d <name>
  删除没有合并的分支 git -D <name>

遇到冲突时的分支合并

分支管理
 分支列表 git branch
 显示分支最后一次提交信息 git branch -v
 --merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支

分支开发工作流

远程分支
  完整列表 git ls-remote
  更详细的信息 git remote show
origin更改

从远端拉取  git pull  相当于 git fetch + git merge 

设置跟踪分支 git checkout --track origin/branch
将本地分支与远程分支设置为不同名字 git checkout -b <localname> origin/serverfix
查看本地分支与远端分支的跟踪情况 git branch -vv

删除远端分支 git push origin --delete serverfix
  基本上这个命令做的只是从服务器上移除这个指针。Git 服务器通常会保留数据一段时间直到垃圾回收运行，所
以如果不小心删除掉了，通常是很容易恢复的。

变基 git rebase master --将当前分支变基到master分支
  在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。在本节中我们将学习什么是“变
基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它
  你在查看一个经过变基的分支的历史记录时会发现，尽管
实际的开发工作是并行的，但它们看上去就像是先后串行的一样，提交历史是一条直线没有分叉。

截取特性分支上的另一个特性分支，然后变基到其他分支
 从一个特性分支里再分出一个特性分支的提交历史 git rebase --onto master server client
  client分支是server分支的子分支，意思是找到client和server的共同祖先，把共同祖先之后的client分支修改在master分支上重演一遍。

将 server 中的修改变基到 master 上 git rebase master server 
  如果当前分支是master，用这个命令省去了把当前分支切换到server再执行git rebase master的操作，减少了一次切换分支的操作。